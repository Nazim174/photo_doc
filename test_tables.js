const { supabase } = require('./src/services/supabase');

async function testTables() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü users –∏ orders...\n');

  try {
    // –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã users
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
    const { data: usersData, error: usersError } = await supabase
      .from('users')
      .select('count', { count: 'exact', head: true });

    if (usersError && usersError.code !== 'PGRST116') {
      throw usersError;
    }

    if (usersError && usersError.code === 'PGRST116') {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${usersData || 0}`);

      // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      const { data: usersStructure, error: structError } = await supabase
        .from('users')
        .select('*')
        .limit(0);

      if (!structError) {
        console.log('üèóÔ∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
        // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –æ—à–∏–±–∫–∏ –∏–ª–∏ metadata
        console.log('   - id (UUID, PRIMARY KEY)');
        console.log('   - email (TEXT, UNIQUE, NOT NULL)');
        console.log('   - password_hash (TEXT, NOT NULL)');
        console.log('   - full_name (TEXT)');
        console.log('   - created_at (TIMESTAMP WITH TIME ZONE)');
        console.log('   - updated_at (TIMESTAMP WITH TIME ZONE)');
      }
    }

    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã orders:');
    const { data: ordersData, error: ordersError } = await supabase
      .from('orders')
      .select('count', { count: 'exact', head: true });

    if (ordersError && ordersError.code !== 'PGRST116') {
      throw ordersError;
    }

    if (ordersError && ordersError.code === 'PGRST116') {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ orders –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${ordersData || 0}`);

      console.log('üèóÔ∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã orders:');
      console.log('   - id (UUID, PRIMARY KEY)');
      console.log('   - user_id (UUID, FOREIGN KEY -> users.id)');
      console.log('   - status (TEXT, CHECK)');
      console.log('   - total_amount (DECIMAL(10,2), NOT NULL)');
      console.log('   - payment_method (TEXT)');
      console.log('   - payment_status (TEXT, CHECK)');
      console.log('   - order_details (JSONB)');
      console.log('   - created_at (TIMESTAMP WITH TIME ZONE)');
      console.log('   - updated_at (TIMESTAMP WITH TIME ZONE)');
    }

    // –¢–µ—Å—Ç —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:');
    try {
      const { data: relationData, error: relationError } = await supabase
        .from('orders')
        .select(`
          id,
          user_id,
          users!inner (
            id,
            email
          )
        `)
        .limit(1);

      if (relationError && relationError.code !== 'PGRST116') {
        console.log('‚ö†Ô∏è  –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ)');
      } else {
        console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
    } catch (err) {
      console.log('‚ö†Ô∏è  –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∏ (—Ç–∞–±–ª–∏—Ü—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏)');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', process.env.SUPABASE_URL);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', err.message);
    process.exit(1);
  }
}

async function insertTestData() {
  console.log('\nüì• –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ–±—Ö–æ–¥–∞ schema cache
    const supabaseUrl = process.env.SUPABASE_URL;
    const anonKey = process.env.SUPABASE_ANON_KEY;

    if (!supabaseUrl || !anonKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_ANON_KEY');
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Supabase client
    const insertData = async (table, data) => {
      const { data: result, error } = await supabase
        .from(table)
        .insert(data)
        .select();

      if (error) {
        throw error;
      }

      return result[0];
    };

    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const testUsers = [
      { email: 'user1@example.com', password_hash: 'hashed_password_1', full_name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' },
      { email: 'user2@example.com', password_hash: 'hashed_password_2', full_name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞' },
      { email: 'user3@example.com', password_hash: 'hashed_password_3', full_name: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤' },
      { email: 'user4@example.com', password_hash: 'hashed_password_4', full_name: '–ï–ª–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞' },
      { email: 'user5@example.com', password_hash: 'hashed_password_5', full_name: '–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤' },
      { email: 'user6@example.com', password_hash: 'hashed_password_6', full_name: '–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞' },
      { email: 'user7@example.com', password_hash: 'hashed_password_7', full_name: '–°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤' },
      { email: 'user8@example.com', password_hash: 'hashed_password_8', full_name: '–ê–Ω–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞' }
    ];

    console.log('üë• –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const insertedUsers = [];
    for (const user of testUsers) {
      try {
        const result = await insertData('users', user);
        insertedUsers.push(result);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –¥–æ–±–∞–≤–ª–µ–Ω`);
      } catch (err) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}: ${err.message}`);
      }
    }

    if (insertedUsers.length === 0) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${insertedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ü–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    const userIds = insertedUsers.map(user => user.id);

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    const testOrders = [
      {
        user_id: userIds[0],
        status: 'pending',
        total_amount: 150.50,
        payment_method: 'card',
        payment_status: 'pending',
        order_details: { items: [{ name: '–§–æ—Ç–æ –ø–µ—á–∞—Ç—å', quantity: 2, price: 75.25 }] }
      },
      {
        user_id: userIds[1],
        status: 'processing',
        total_amount: 299.99,
        payment_method: 'paypal',
        payment_status: 'paid',
        order_details: { items: [{ name: '–§–æ—Ç–æ –∞–ª—å–±–æ–º', quantity: 1, price: 299.99 }] }
      },
      {
        user_id: userIds[2],
        status: 'completed',
        total_amount: 89.00,
        payment_method: 'card',
        payment_status: 'paid',
        order_details: { items: [{ name: '–§–æ—Ç–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã', quantity: 3, price: 29.67 }] }
      },
      {
        user_id: userIds[3],
        status: 'cancelled',
        total_amount: 450.00,
        payment_method: 'bank_transfer',
        payment_status: 'failed',
        order_details: { items: [{ name: '–°–≤–∞–¥–µ–±–Ω—ã–π —Ñ–æ—Ç–æ –ø–∞–∫–µ—Ç', quantity: 1, price: 450.00 }] }
      },
      {
        user_id: userIds[4],
        status: 'pending',
        total_amount: 120.75,
        payment_method: 'card',
        payment_status: 'pending',
        order_details: { items: [{ name: '–§–æ—Ç–æ —Ä–µ—Ç—É—à—å', quantity: 5, price: 24.15 }] }
      },
      {
        user_id: userIds[5],
        status: 'processing',
        total_amount: 199.99,
        payment_method: 'paypal',
        payment_status: 'paid',
        order_details: { items: [{ name: '–§–æ—Ç–æ —Å–µ—Å—Å–∏—è', quantity: 1, price: 199.99 }] }
      },
      {
        user_id: userIds[6],
        status: 'completed',
        total_amount: 350.00,
        payment_method: 'card',
        payment_status: 'paid',
        order_details: { items: [{ name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ç–æ', quantity: 2, price: 175.00 }] }
      },
      {
        user_id: userIds[7],
        status: 'completed',
        total_amount: 75.25,
        payment_method: 'cash',
        payment_status: 'paid',
        order_details: { items: [{ name: '–§–æ—Ç–æ –ø–µ—á–∞—Ç—å', quantity: 1, price: 75.25 }] }
      },
      {
        user_id: userIds[0],
        status: 'pending',
        total_amount: 225.50,
        payment_method: 'card',
        payment_status: 'pending',
        order_details: { items: [{ name: '–§–æ—Ç–æ –∫–æ–ª–ª–∞–∂', quantity: 3, price: 75.17 }] }
      },
      {
        user_id: userIds[1],
        status: 'processing',
        total_amount: 499.99,
        payment_method: 'paypal',
        payment_status: 'paid',
        order_details: { items: [{ name: '–ü—Ä–µ–º–∏—É–º —Ñ–æ—Ç–æ –ø–∞–∫–µ—Ç', quantity: 1, price: 499.99 }] }
      }
    ];

    console.log('üì¶ –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');
    const insertedOrders = [];
    for (const order of testOrders) {
      try {
        const result = await insertData('orders', order);
        insertedOrders.push(result);
        console.log(`‚úÖ –ó–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${order.user_id} –¥–æ–±–∞–≤–ª–µ–Ω`);
      } catch (err) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑: ${err.message}`);
      }
    }

    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${insertedOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', err.message);
  }
}

async function checkDataAndInstructions() {
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: usersCount, error: usersError } = await supabase
      .from('users')
      .select('count', { count: 'exact', head: true });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    const { data: ordersCount, error: ordersError } = await supabase
      .from('orders')
      .select('count', { count: 'exact', head: true });

    const usersNum = usersCount || 0;
    const ordersNum = ordersCount || 0;

    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${usersNum}`);
    console.log(`üì¶ –ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ: ${ordersNum}`);

    if (usersNum > 0 && ordersNum > 0) {
      console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É!');
      return true;
    } else {
      console.log('\n‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
      console.log('\nüìã –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard: https://supabase.com');
      console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç');
      console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
      console.log('4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ setup_and_seed.sql');
      console.log('5. –í—Å—Ç–∞–≤—å—Ç–µ –≤ SQL Editor –∏ –Ω–∞–∂–º–∏—Ç–µ Run');
      console.log('6. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');

      return false;
    }

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    return false;
  }
}

async function main() {
  await testTables();
  const hasData = await checkDataAndInstructions();

  if (!hasData) {
    console.log('\nüì• –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await insertTestData();
  } else {
    console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É.');
  }
}

main();