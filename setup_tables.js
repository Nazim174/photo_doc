const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ß—Ç–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–æ–≤
function readSqlFile(filename) {
  const filePath = path.join(__dirname, filename);
  return fs.readFileSync(filePath, 'utf8');
}

async function setupTables() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–∞–±–ª–∏—Ü –≤ Supabase...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ service role key
  const supabaseUrl = process.env.SUPABASE_URL;
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!serviceRoleKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SUPABASE_SERVICE_ROLE_KEY –≤ .env —Ñ–∞–π–ª–µ');
    console.log('üìù –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –≤ –≤–∞—à .env —Ñ–∞–π–ª:');
    console.log('SUPABASE_SERVICE_ROLE_KEY=–≤–∞—à_service_role_key');
    console.log('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –≤ Supabase Dashboard -> Settings -> API -> Service Role Key');
    process.exit(1);
  }

  if (!supabaseUrl) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SUPABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role key –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DDL –∫–æ–º–∞–Ω–¥
  const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });

  try {
    // –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç—ã
    const usersSql = readSqlFile('create_users_table.sql');
    const ordersSql = readSqlFile('create_orders_table.sql');

    console.log('üìÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users...');

    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π)
    const usersCommands = usersSql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0);

    for (const command of usersCommands) {
      if (command.trim()) {
        console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º: ${command.substring(0, 50)}...`);
        const { data, error } = await supabaseAdmin.rpc('exec_sql', {
          sql: command + ';'
        });

        if (error) {
          // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è exec_sql –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
          if (error.message.includes('function exec_sql')) {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL...');
            // –î–ª—è Supabase –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å REST API –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            console.log('‚ö†Ô∏è  –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DDL —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ RPC —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Supabase');
            console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Supabase');
            break;
          }
          throw error;
        }
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }
    }

    console.log('üìÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã orders...');

    const ordersCommands = ordersSql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0);

    for (const command of ordersCommands) {
      if (command.trim()) {
        console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º: ${command.substring(0, 50)}...`);
        const { data, error } = await supabaseAdmin.rpc('exec_sql', {
          sql: command + ';'
        });

        if (error) {
          throw error;
        }
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }
    }

    console.log('üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üîç –ó–∞–ø—É—Å—Ç–∏—Ç–µ test_connection.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error.message);

    if (error.message.includes('exec_sql')) {
      console.log('\nüìù –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Å–∫—Ä–∏–ø—Ç–æ–≤:');
      console.log('1. –°–æ–∑–¥–∞–π—Ç–µ RPC —Ñ—É–Ω–∫—Ü–∏—é –≤ Supabase SQL Editor:');
      console.log(`
CREATE OR REPLACE FUNCTION exec_sql(sql text)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  EXECUTE sql;
END;
$$;
      `);
      console.log('2. –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Supabase');
    }

    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  setupTables().catch(console.error);
}

module.exports = { setupTables };