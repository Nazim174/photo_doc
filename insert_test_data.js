const { userService, orderService, supabase } = require('./src/services/supabase');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ schema cache
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å service role –¥–ª—è RPC (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
let supabaseAdmin = null;
try {
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  if (serviceRoleKey) {
    supabaseAdmin = createClient(process.env.SUPABASE_URL, serviceRoleKey);
    console.log('‚úÖ Supabase admin client —Å–æ–∑–¥–∞–Ω –¥–ª—è RPC –æ–ø–µ—Ä–∞—Ü–∏–π');
  }
} catch (err) {
  console.log('‚ö†Ô∏è  Service role key –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç');
}

async function insertTestData() {
  console.log('üì• –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ö–æ–¥–æ–º schema cache...\n');

  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if (supabaseAdmin) {
      console.log('üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RPC —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ schema cache...');
      try {
        const { data, error } = await supabaseAdmin.rpc('insert_all_test_data');
        if (error) throw error;

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ RPC!');
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data[0].users_count}`);
        console.log(`üì¶ –ó–∞–∫–∞–∑—ã: ${data[0].orders_count}`);

        return { insertedUsers: Array(data[0].users_count).fill({}), insertedOrders: Array(data[0].orders_count).fill({}) };
      } catch (err) {
        console.log('‚ö†Ô∏è  RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞:', err.message);
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ—Ç–æ–¥—É –≤—Å—Ç–∞–≤–∫–∏...');
      }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ schema cache –ø—É—Ç–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ schema cache...');
    await sleep(1000);

    // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å cache –ø—É—Ç–µ–º select –∑–∞–ø—Ä–æ—Å–æ–≤
    try {
      await supabase.from('users').select('id').limit(1);
      console.log('‚úÖ Cache –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (err) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ cache –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω:', err.message);
    }

    try {
      await supabase.from('orders').select('id').limit(1);
      console.log('‚úÖ Cache –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã orders –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (err) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ orders –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ cache –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω:', err.message);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await sleep(1000);

    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const testUsers = [
      { email: 'user1@example.com', password_hash: 'hashed_password_1', full_name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' },
      { email: 'user2@example.com', password_hash: 'hashed_password_2', full_name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞' },
      { email: 'user3@example.com', password_hash: 'hashed_password_3', full_name: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤' },
      { email: 'user4@example.com', password_hash: 'hashed_password_4', full_name: '–ï–ª–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞' },
      { email: 'user5@example.com', password_hash: 'hashed_password_5', full_name: '–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤' },
      { email: 'user6@example.com', password_hash: 'hashed_password_6', full_name: '–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞' },
      { email: 'user7@example.com', password_hash: 'hashed_password_7', full_name: '–°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤' },
      { email: 'user8@example.com', password_hash: 'hashed_password_8', full_name: '–ê–Ω–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞' }
    ];

    console.log('üë• –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏...');
    const insertedUsers = [];
    for (const user of testUsers) {
      try {
        const result = await userService.createUser(user);
        insertedUsers.push(result);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –¥–æ–±–∞–≤–ª–µ–Ω`);

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—Å—Ç–∞–≤–∫–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ schema cache
        await sleep(500);
      } catch (err) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}: ${err.message}`);
        await sleep(200); // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }

    if (insertedUsers.length === 0) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${insertedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –∑–∞–∫–∞–∑–æ–≤
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –∑–∞–∫–∞–∑–æ–≤...');
    await sleep(1500);

    // –ü–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    const userIds = insertedUsers.map(user => user.id);

    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    const testOrders = [
      {
        user_id: userIds[0],
        status: 'pending',
        total_amount: 150.50,
        payment_method: 'card',
        payment_status: 'pending',
        order_details: { items: [{ name: '–§–æ—Ç–æ –ø–µ—á–∞—Ç—å', quantity: 2, price: 75.25 }] }
      },
      {
        user_id: userIds[1],
        status: 'processing',
        total_amount: 299.99,
        payment_method: 'paypal',
        payment_status: 'paid',
        order_details: { items: [{ name: '–§–æ—Ç–æ –∞–ª—å–±–æ–º', quantity: 1, price: 299.99 }] }
      },
      {
        user_id: userIds[2],
        status: 'completed',
        total_amount: 89.00,
        payment_method: 'card',
        payment_status: 'paid',
        order_details: { items: [{ name: '–§–æ—Ç–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã', quantity: 3, price: 29.67 }] }
      },
      {
        user_id: userIds[3],
        status: 'cancelled',
        total_amount: 450.00,
        payment_method: 'bank_transfer',
        payment_status: 'failed',
        order_details: { items: [{ name: '–°–≤–∞–¥–µ–±–Ω—ã–π —Ñ–æ—Ç–æ –ø–∞–∫–µ—Ç', quantity: 1, price: 450.00 }] }
      },
      {
        user_id: userIds[4],
        status: 'pending',
        total_amount: 120.75,
        payment_method: 'card',
        payment_status: 'pending',
        order_details: { items: [{ name: '–§–æ—Ç–æ —Ä–µ—Ç—É—à—å', quantity: 5, price: 24.15 }] }
      },
      {
        user_id: userIds[5],
        status: 'processing',
        total_amount: 199.99,
        payment_method: 'paypal',
        payment_status: 'paid',
        order_details: { items: [{ name: '–§–æ—Ç–æ —Å–µ—Å—Å–∏—è', quantity: 1, price: 199.99 }] }
      },
      {
        user_id: userIds[6],
        status: 'completed',
        total_amount: 350.00,
        payment_method: 'card',
        payment_status: 'paid',
        order_details: { items: [{ name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ç–æ', quantity: 2, price: 175.00 }] }
      },
      {
        user_id: userIds[7],
        status: 'completed',
        total_amount: 75.25,
        payment_method: 'cash',
        payment_status: 'paid',
        order_details: { items: [{ name: '–§–æ—Ç–æ –ø–µ—á–∞—Ç—å', quantity: 1, price: 75.25 }] }
      },
      {
        user_id: userIds[0],
        status: 'pending',
        total_amount: 225.50,
        payment_method: 'card',
        payment_status: 'pending',
        order_details: { items: [{ name: '–§–æ—Ç–æ –∫–æ–ª–ª–∞–∂', quantity: 3, price: 75.17 }] }
      },
      {
        user_id: userIds[1],
        status: 'processing',
        total_amount: 499.99,
        payment_method: 'paypal',
        payment_status: 'paid',
        order_details: { items: [{ name: '–ü—Ä–µ–º–∏—É–º —Ñ–æ—Ç–æ –ø–∞–∫–µ—Ç', quantity: 1, price: 499.99 }] }
      }
    ];

    console.log('üì¶ –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏...');
    const insertedOrders = [];
    for (const order of testOrders) {
      try {
        const result = await orderService.createOrder(order);
        insertedOrders.push(result);
        console.log(`‚úÖ –ó–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${order.user_id} –¥–æ–±–∞–≤–ª–µ–Ω`);

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—Å—Ç–∞–≤–∫–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
        await sleep(700);
      } catch (err) {
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑: ${err.message}`);
        await sleep(300); // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }

    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${insertedOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –æ–±—Ö–æ–¥–æ–º schema cache!');

    return { insertedUsers, insertedOrders };

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', err.message);
    throw err;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  insertTestData()
    .then((result) => {
      console.log('\nüìä –°–≤–æ–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${result?.insertedUsers?.length || 0}`);
      console.log(`üì¶ –ó–∞–∫–∞–∑—ã: ${result?.insertedOrders?.length || 0}`);
      process.exit(0);
    })
    .catch((err) => {
      console.error('‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', err.message);
      process.exit(1);
    });
}

module.exports = insertTestData;