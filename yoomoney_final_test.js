// yoomoney_final_test.js - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooMoney —Å –ø–ª–∞–Ω–∞–º–∏ A, B, C
require('dotenv').config();

class YooMoneyFinalTester {
    constructor() {
        this.plans = {
            A: {
                name: '–ü–ª–∞–Ω A: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ localhost',
                SERVER_URL: process.env.YOOMONEY_ALT_SERVER_URL || 'http://localhost:3000',
                REDIRECT_URI: process.env.YOOMONEY_ALT_REDIRECT_URI || 'http://localhost:3000/callback',
                NOTIFICATION_URI: process.env.YOOMONEY_ALT_SERVER_URL || 'http://localhost:3000' + '/webhooks/yoomoney',
                USE_CASE: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
            },
            B: {
                name: '–ü–ª–∞–Ω B: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å ngrok',
                SERVER_URL: process.env.YOOMONEY_NGROK_SERVER_URL || 'https://your-project.ngrok.io',
                REDIRECT_URI: process.env.YOOMONEY_NGROK_REDIRECT_URI || 'https://your-project.ngrok.io/callback',
                NOTIFICATION_URI: process.env.YOOMONEY_NGROK_SERVER_URL || 'https://your-project.ngrok.io' + '/webhooks/yoomoney',
                USE_CASE: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π'
            },
            C: {
                name: '–ü–ª–∞–Ω C: Production',
                SERVER_URL: process.env.YOOMONEY_PROD_SERVER_URL || 'https://your-domain.com',
                REDIRECT_URI: process.env.YOOMONEY_PROD_REDIRECT_URI || 'https://your-domain.com/auth/callback',
                NOTIFICATION_URI: process.env.YOOMONEY_PROD_SERVER_URL || 'https://your-domain.com' + '/webhooks/yoomoney',
                USE_CASE: '–†–∞–±–æ—á–∞—è —Å—Ä–µ–¥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏'
            }
        };
    }

    async testAllPlans() {
        console.log('üéØ –ü–û–õ–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø YOOMONEY –ù–ê–°–¢–†–û–ï–ö');
        console.log('=============================================\n');

        for (const [planKey, plan] of Object.entries(this.plans)) {
            console.log(`üìã ${plan.name}`);
            console.log(`   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${plan.USE_CASE}`);
            console.log(`   SERVER_URL: ${plan.SERVER_URL}`);
            console.log(`   REDIRECT_URI: ${plan.REDIRECT_URI}`);
            console.log(`   NOTIFICATION_URI: ${plan.NOTIFICATION_URI}`);

            const results = await this.validatePlan(plan);
            this.displayResults(results);
            console.log('');
        }
    }

    async validatePlan(plan) {
        const results = {};

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
        results.serverUrlFormat = this.checkURLFormat(plan.SERVER_URL);
        results.redirectUriFormat = this.checkURLFormat(plan.REDIRECT_URI);
        results.notificationUriFormat = this.checkURLFormat(plan.NOTIFICATION_URI);

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –¥–ª—è production
        results.redirectHttpsSafe = this.checkHttpsForPayment(plan.REDIRECT_URI, plan.SERVER_URL);
        results.notificationHttpsSafe = this.checkHttpsForWebhook(plan.NOTIFICATION_URI);

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–º–µ–Ω–æ–≤
        results.domainConsistency = this.checkDomainConsistency(plan.SERVER_URL, plan.REDIRECT_URI, plan.NOTIFICATION_URI);

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Ç–µ–π
        results.callbackPath = this.checkCallbackPath(plan.REDIRECT_URI);
        results.notificationPath = this.checkNotificationPath(plan.NOTIFICATION_URI);

        // 5. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        results.overall = this.calculateOverallScore(results);

        return results;
    }

    displayResults(results) {
        console.log('   ‚úÖ –§–æ—Ä–º–∞—Ç—ã URL:');
        console.log(`      - Server URL: ${results.serverUrlFormat.valid ? '‚úÖ' : '‚ùå'} ${results.serverUrlFormat.error || 'OK'}`);
        console.log(`      - Redirect URI: ${results.redirectUriFormat.valid ? '‚úÖ' : '‚ùå'} ${results.redirectUriFormat.error || 'OK'}`);
        console.log(`      - Notification URI: ${results.notificationUriFormat.valid ? '‚úÖ' : '‚ùå'} ${results.notificationUriFormat.error || 'OK'}`);

        console.log('   üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å HTTPS:');
        console.log(`      - Redirect: ${results.redirectHttpsSafe.safe ? '‚úÖ' : '‚ö†Ô∏è'} ${results.redirectHttpsSafe.message}`);
        console.log(`      - Notification: ${results.notificationHttpsSafe.safe ? '‚úÖ' : '‚ö†Ô∏è'} ${results.notificationHttpsSafe.message}`);

        console.log('   üèõÔ∏è –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:');
        console.log(`      - –î–æ–º–µ–Ω—ã: ${results.domainConsistency.consistent ? '‚úÖ' : '‚ö†Ô∏è'} ${results.domainConsistency.message}`);

        console.log('   üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Ç–µ–π:');
        console.log(`      - Callback: ${results.callbackPath.correct ? '‚úÖ' : '‚ö†Ô∏è'} ${results.callbackPath.message}`);
        console.log(`      - Notification: ${results.notificationPath.correct ? '‚úÖ' : '‚ö†Ô∏è'} ${results.notificationPath.message}`);

        console.log(`   üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${results.overall.score}/10 - ${results.overall.status}`);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    checkURLFormat(url) {
        try {
            new URL(url);
            return { valid: true };
        } catch (e) {
            return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL' };
        }
    }

    checkHttpsForPayment(redirectUrl, serverUrl) {
        const isHttps = redirectUrl.startsWith('https://');
        const isLocal = redirectUrl.includes('localhost') || redirectUrl.includes('127.0.0.1');

        if (isLocal) {
            return { safe: true, message: '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω' };
        }

        if (serverUrl.includes('your-domain.com') || serverUrl.includes('ngrok.io')) {
            if (!isHttps) {
                return { safe: false, message: '–î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS' };
            }
        }

        return { safe: isHttps, message: isHttps ? 'HTTPS –≤–∫–ª—é—á–µ–Ω' : '–†–∞–±–æ—Ç–∞–µ—Ç –ø–æ HTTP' };
    }

    checkHttpsForWebhook(notificationUrl) {
        const isHttps = notificationUrl.startsWith('https://');
        const isLocal = notificationUrl.includes('localhost') || notificationUrl.includes('127.0.0.1');

        if (isLocal) {
            return { safe: false, message: '–î–ª—è –≤–µ–±—Ö—É–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –∏–ª–∏ production)' };
        }

        if (!isHttps) {
            return { safe: false, message: 'YooMoney —Ç—Ä–µ–±—É–µ—Ç HTTPS –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤' };
        }

        return { safe: true, message: 'HTTPS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ' };
    }

    checkDomainConsistency(serverUrl, redirectUri, notificationUri) {
        try {
            const serverDomain = new URL(serverUrl).host;
            const redirectDomain = new URL(redirectUri).host;
            const notificationDomain = new URL(notificationUri).host;

            const allSame = serverDomain === redirectDomain && redirectDomain === notificationDomain;

            if (allSame) {
                return { consistent: true, message: '–í—Å–µ URI –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–æ–º–µ–Ω' };
            }

            const serverRedirect = serverDomain === redirectDomain;
            const serverNotification = serverDomain === notificationDomain;

            if (serverRedirect && !serverNotification) {
                return { consistent: false, message: 'Notification URI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω' };
            }

            return { consistent: false, message: '–†–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã CORS' };
        } catch (e) {
            return { consistent: false, message: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–æ–≤' };
        }
    }

    checkCallbackPath(redirectUri) {
        const path = redirectUri.split('/').pop();

        if (!path) {
            return { correct: false, message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –≤ URL' };
        }

        const goodPaths = ['callback', 'authorize', 'oauth'];
        const isGood = goodPaths.some(goodPath => path.toLowerCase().includes(goodPath));

        if (isGood) {
            return { correct: true, message: `–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø—É—Ç–∏: ${path}` };
        }

        return { correct: false, message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º /callback, /authorize –∏–ª–∏ /oauth' };
    }

    checkNotificationPath(notificationUri) {
        const path = notificationUri.split('/').slice(-2).join('/'); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        const goodPatterns = [
            'webhooks/yoomoney',
            'webhooks/payments',
            'api/webhook',
            'hooks/yoomoney'
        ];

        const isGood = goodPatterns.some(pattern => path.toLowerCase().includes(pattern));

        if (isGood) {
            return { correct: true, message: `–•–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: /${path}` };
        }

        return { correct: false, message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º /webhooks/yoomoney –∏–ª–∏ /api/webhook' };
    }

    calculateOverallScore(results) {
        let score = 0;
        let maxScore = 10;

        // –§–æ—Ä–º–∞—Ç—ã URL (3 –±–∞–ª–ª–∞)
        if (results.serverUrlFormat.valid) score += 1;
        if (results.redirectUriFormat.valid) score += 1;
        if (results.notificationUriFormat.valid) score += 1;

        // HTTPS –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (2 –±–∞–ª–ª–∞)
        if (results.redirectHttpsSafe.safe) score += 1;
        if (results.notificationHttpsSafe.safe) score += 1;

        // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤ (2 –±–∞–ª–ª–∞)
        if (results.domainConsistency.consistent) score += 2;

        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Ç–µ–π (3 –±–∞–ª–ª–∞)
        if (results.callbackPath.correct) score += 1;
        if (results.notificationPath.correct) score += 2;

        let status = '‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏';
        if (score >= 7) status = '‚úÖ –•–æ—Ä–æ—à–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
        else if (score >= 5) status = '‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π';

        return { score: score, maxScore: maxScore, status: status };
    }

    generateRecommendations() {
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–°–¢–†–ê–ù–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú');
        console.log('=============================================\n');

        console.log('üîß –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –¥–ª—è –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö callback –∏ –≤–µ–±—Ö—É–∫–æ–≤');
        console.log('2. –û–¥–∏–Ω –¥–æ–º–µ–Ω –¥–ª—è –≤—Å–µ—Ö URI (–∏–∑–±–µ–≥–∞–π—Ç–µ CORS –ø—Ä–æ–±–ª–µ–º)');
        console.log('3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏: /callback, /webhooks/yoomoney');
        console.log('');

        console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø–ª–∞–Ω–∞–º:');
        console.log('');

        console.log('# –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ü–ª–∞–Ω A)');
        console.log('SERVER_URL=http://localhost:3000');
        console.log('YOOMONEY_REDIRECT_URI=http://localhost:3000/callback');
        console.log('# –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok');
        console.log('');

        console.log('# –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ü–ª–∞–Ω B)');
        console.log('YOOMONEY_NGROK_SERVER_URL=https://abc123.ngrok.io');
        console.log('YOOMONEY_NGROK_REDIRECT_URI=https://abc123.ngrok.io/callback');
        console.log('');

        console.log('# –î–ª—è production (–ü–ª–∞–Ω C)');
        console.log('YOOMONEY_PROD_SERVER_URL=https://your-domain.com');
        console.log('YOOMONEY_PROD_REDIRECT_URI=https://your-domain.com/auth/callback');
    }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new YooMoneyFinalTester();

    tester.testAllPlans().then(() => {
        tester.generateRecommendations();
        console.log('\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø YOOMONEY –ù–ê–°–¢–†–û–ï–ö –ó–ê–í–ï–†–®–ï–ù–ê');
    }).catch(console.error);
}

module.exports = { YooMoneyFinalTester };